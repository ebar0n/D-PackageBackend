# -*- coding: utf-8 -*-
# Generated by Django 1.9.5 on 2016-10-23 03:13
from __future__ import unicode_literals

import uuid

import django.contrib.auth.models
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0007_alter_validators_add_error_messages'),
        ('sw_payments', '0001_initial'),
        ('sw_vehicles', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserAccount',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(
                    default=False,
                    help_text='Designates that this user has all permissions without explicitly assigning them.',
                    verbose_name='superuser status')),
                ('username', models.CharField(
                    error_messages={'unique': 'A user with that username already exists.'},
                    help_text='Required. 30 characters or fewer. Letters, digits and @/./+/-/_ only.',
                    max_length=30,
                    unique=True,
                    validators=[django.core.validators.RegexValidator(
                        '^[\\w.@+-]+$',
                        'Enter a valid username. This value may contain' +
                        ' only letters, numbers and @/./+/-/_ characters.')],
                    verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(
                    default=False,
                    help_text='Designates whether the user can log into this admin site.',
                    verbose_name='staff status')),
                ('is_active', models.BooleanField(
                    default=True,
                    help_text='Designates whether this user should be treated as active.' +
                    ' Unselect this instead of deleting accounts.',
                    verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('check_mail', models.BooleanField(default=False, verbose_name='Correo verificado')),
                ('token', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('token_expires', models.DateTimeField(editable=False, null=True)),
            ],
            options={
                'verbose_name': 'Usuario',
                'verbose_name_plural': 'Usuarios',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ClientAccount',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone', models.CharField(max_length=11, verbose_name='Telefóno')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Cliente',
                'verbose_name_plural': 'Clientes',
            },
        ),
        migrations.CreateModel(
            name='ServiceAccount',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identity_card', models.CharField(max_length=8, verbose_name='Cedula de identidad')),
                ('driver_license', models.CharField(max_length=20, verbose_name='Licencia de conducir')),
                ('phone', models.CharField(max_length=11, verbose_name='Telefóno')),
                ('photo', models.ImageField(blank=True, upload_to='servicePhoto', verbose_name='Foto')),
                ('birthdate', models.DateField(verbose_name='Fecha de nacimiento')),
                ('address', models.CharField(max_length=100, verbose_name='Dirección')),
                ('identity_check', models.BooleanField(default=False, verbose_name='Identidad verificada')),
                ('balance', models.DecimalField(decimal_places=2, max_digits=6, verbose_name='Saldo')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('bankaccount', models.OneToOneField(
                    null=True,
                    on_delete=django.db.models.deletion.CASCADE,
                    to='sw_payments.BankAccount',
                    verbose_name='Cuenta bancaria')),
                ('vehicle', models.OneToOneField(
                    on_delete=django.db.models.deletion.CASCADE,
                    to='sw_vehicles.Vehicle',
                    verbose_name='Vehículo')),
            ],
            options={
                'verbose_name': 'Prestador de servicio',
                'verbose_name_plural': 'Prestadores de servicio',
            },
        ),
        migrations.AddField(
            model_name='useraccount',
            name='client',
            field=models.OneToOneField(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to='sw_users.ClientAccount',
                verbose_name='Cliente'),
        ),
        migrations.AddField(
            model_name='useraccount',
            name='groups',
            field=models.ManyToManyField(
                blank=True,
                help_text='The groups this user belongs to.' +
                ' A user will get all permissions granted to each of their groups.',
                related_name='user_set',
                related_query_name='user',
                to='auth.Group',
                verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='useraccount',
            name='service',
            field=models.OneToOneField(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to='sw_users.ServiceAccount',
                verbose_name='Prestador de servicio'),
        ),
        migrations.AddField(
            model_name='useraccount',
            name='user_permissions',
            field=models.ManyToManyField(
                blank=True,
                help_text='Specific permissions for this user.',
                related_name='user_set',
                related_query_name='user',
                to='auth.Permission',
                verbose_name='user permissions'),
        ),
    ]
